[{"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\index.tsx":"1","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\reportWebVitals.js":"2","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\App.tsx":"3","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\index.tsx":"4","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\process-list\\process_list.ts":"5","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\InstructionStep.tsx":"6","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\ProcessAndDownloadStep.tsx":"7","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\IntroductionStep.tsx":"8","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetLastNameStep.tsx":"9","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetFirstNameStep.tsx":"10","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVDownloadStep.tsx":"11","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVUploadStep.tsx":"12","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetGenderStep.tsx":"13","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetTimesAppliedStep.tsx":"14","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetGraduatingStep.tsx":"15","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVVerificationStep.tsx":"16","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetClassYearStep.tsx":"17","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\SelectionVerificationStep.tsx":"18"},{"size":517,"mtime":1610490402967,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":10496,"mtime":1610756335645,"results":"22","hashOfConfig":"20"},{"size":1028,"mtime":1610755819741,"results":"23","hashOfConfig":"20"},{"size":13551,"mtime":1610743551039,"results":"24","hashOfConfig":"20"},{"size":2165,"mtime":1610736900009,"results":"25","hashOfConfig":"20"},{"size":2030,"mtime":1610743428458,"results":"26","hashOfConfig":"20"},{"size":573,"mtime":1610755539196,"results":"27","hashOfConfig":"20"},{"size":1820,"mtime":1610756107167,"results":"28","hashOfConfig":"20"},{"size":1831,"mtime":1610756056371,"results":"29","hashOfConfig":"20"},{"size":1215,"mtime":1610755945102,"results":"30","hashOfConfig":"20"},{"size":1210,"mtime":1610755974635,"results":"31","hashOfConfig":"20"},{"size":1794,"mtime":1610756074896,"results":"32","hashOfConfig":"20"},{"size":1908,"mtime":1610756139920,"results":"33","hashOfConfig":"20"},{"size":1894,"mtime":1610756089417,"results":"34","hashOfConfig":"20"},{"size":957,"mtime":1610755996975,"results":"35","hashOfConfig":"20"},{"size":1855,"mtime":1610756039962,"results":"36","hashOfConfig":"20"},{"size":4905,"mtime":1610756008917,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ixht7r",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\index.tsx",[],["77","78"],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\reportWebVitals.js",[],["79","80"],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\App.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\index.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\process-list\\process_list.ts",["81","82","83"],"interface Applicant {\r\n    id: number,\r\n    first_name: string;\r\n    last_name: string;\r\n    gender: string;\r\n    times_applied: number;\r\n    is_graduating: boolean;\r\n};\r\n\r\nfunction normalizeString(str: string): string {\r\n    return str.toUpperCase().trim();\r\n}\r\n\r\nfunction CSVToArray( strData: string): string[][] {\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    let strDelimiter: string  = \",\";\r\n\r\n    // Create a regular expression to parse the CSV values.\r\n    var objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n        ),\r\n        \"gi\"\r\n        );\r\n\r\n\r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    var arrData: string[][] = [[]];\r\n\r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    var arrMatches = null;\r\n\r\n\r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    while (arrMatches = objPattern.exec( strData )){\r\n\r\n        // Get the delimiter that was found.\r\n        var strMatchedDelimiter = arrMatches[ 1 ];\r\n\r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            (strMatchedDelimiter != strDelimiter)\r\n            ){\r\n\r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push( [] );\r\n\r\n        }\r\n\r\n\r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[ 2 ]){\r\n\r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            var strMatchedValue = arrMatches[ 2 ].replace(\r\n                new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                \"\\\"\"\r\n                );\r\n\r\n        } else {\r\n\r\n            // We found a non-quoted value.\r\n            var strMatchedValue = arrMatches[ 3 ];\r\n\r\n        }\r\n\r\n\r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\r\n    }\r\n\r\n    // Return the parsed data.\r\n    return( arrData );\r\n}\r\n\r\nfunction parseNumberOfTimesApplied(number_of_times_applied_string: string): number {\r\n    let parsed = parseInt(number_of_times_applied_string);\r\n    if (isNaN(parsed)) {\r\n        alert('An answer in the \"How many times have you applied\" question was not a number. Please fix this.');\r\n        return 1;\r\n    }\r\n    return parsed + 1;\r\n}\r\n\r\nfunction getCurrentYear(): number {\r\n    return new Date().getFullYear();\r\n}\r\n\r\nfunction parseClassYear(class_year_string: string): number {\r\n    let parsed = parseInt(class_year_string);\r\n    if (isNaN(parsed)) {\r\n        alert('An answer to the \"What is your class year\" question was not a number. Please fix this.');\r\n        return getCurrentYear() + 10;\r\n        // I return the current year plus 10 so if there is an error, the return won't affect an applicant's chances of being chosen.\r\n    }\r\n    return parsed;\r\n}\r\n\r\nfunction isApplicantGraduating(is_graduating_string: string, class_year_string: string): boolean {\r\n    if (is_graduating_string.length === 0) {\r\n        return false;\r\n    }\r\n    let first_letter = is_graduating_string.toUpperCase()[0];\r\n    if ((first_letter === 'Y')||(first_letter === 'T')) {\r\n        let class_year: number = parseClassYear(class_year_string);\r\n        if (class_year <= (getCurrentYear() + 1)) { // If the applicant says they're graduating but their class year is not the current or next year, then they aren't really graduating.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    if ((first_letter === 'N')||(first_letter === 'F')) {\r\n        return false;\r\n    }\r\n    alert('You must make sure the \"Are you graduating this semester\" question has answers including ONLY \"Yes\" or \"No\"');\r\n    return false;\r\n}\r\n\r\nfunction isApplicantInArray(applicant: Applicant, applicant_array:Applicant[]) {\r\n    //console.log(applicant);\r\n    //console.log(applicant_array);\r\n    \r\n    //if(applicant_array.length > 0) {\r\n        //console.log(applicant.first_name === applicant_array[applicant_array.length - 1].first_name, applicant.last_name === applicant_array[applicant_array.length - 1].last_name);\r\n        //console.log(applicant_array[applicant_array.length - 1].last_name, applicant.id);\r\n    //}\r\n    let return_value: boolean = false;\r\n    applicant_array.forEach(existing_applicant => {\r\n        if ((applicant.first_name === existing_applicant.first_name)&&(applicant.last_name === existing_applicant.last_name)) {\r\n            return_value = true;\r\n            //console.log(applicant.last_name);\r\n        }\r\n    });\r\n    return return_value;\r\n}\r\n\r\nfunction CSVDataToListOfApplicants(data: string[][], \r\n                                    first_name_index:number,\r\n                                    last_name_index: number, \r\n                                    gender_index: number, \r\n                                    times_applied_index: number, \r\n                                    graduating_index: number, \r\n                                    class_year_index: number): Applicant[] \r\n{\r\n    var applicant_data: Applicant[] = [];\r\n    let first_line: boolean = true;\r\n    let csv_line_number: number = 0;\r\n    data.forEach(applicant_array => {\r\n        if (first_line) {\r\n            first_line = false;\r\n        } else {\r\n            var applicant: Applicant = {\r\n                id: csv_line_number,\r\n                first_name: normalizeString(applicant_array[first_name_index]),\r\n                last_name: normalizeString(applicant_array[last_name_index]),\r\n                gender: normalizeString(applicant_array[gender_index]),\r\n                times_applied: parseNumberOfTimesApplied(applicant_array[times_applied_index]),\r\n                is_graduating: isApplicantGraduating(applicant_array[graduating_index], applicant_array[class_year_index]),\r\n            }\r\n            if (!isApplicantInArray(applicant, applicant_data)){\r\n                applicant_data.push(applicant);\r\n                //console.log('Added');\r\n            }   \r\n            //pause();\r\n        }\r\n        csv_line_number++;\r\n    });\r\n    return applicant_data;\r\n}\r\n\r\nfunction copyApplicant(applicant: Applicant): Applicant {\r\n    var new_applicant: Applicant = {\r\n        id: applicant.id,\r\n        first_name: applicant.first_name,\r\n        last_name: applicant.last_name,\r\n        gender: applicant.gender,\r\n        times_applied: applicant.times_applied,\r\n        is_graduating: applicant.is_graduating\r\n    };\r\n    return new_applicant;\r\n}\r\n\r\nfunction duplicateApplicantsBasedOnTimesApplied(unduplicated_applicants: Applicant[]): Applicant[] {\r\n    var duplicated_applicants: Applicant[] = [];\r\n    unduplicated_applicants.forEach(applicant => {\r\n        for(let i = 0; i < applicant.times_applied; i++) {\r\n            duplicated_applicants.push(copyApplicant(applicant));\r\n        }\r\n    });\r\n    return duplicated_applicants;\r\n}\r\n\r\ninterface TwoArraysOfApplicants {\r\n    mens_list: Applicant[],\r\n    womens_list: Applicant[]\r\n};\r\n\r\nfunction parseGender(gender_string: string): string {\r\n    // returns 'M' if a male, 'F' if a female, or '' if it can't be determined\r\n    if (gender_string.length === 0) {\r\n        return '';\r\n    }\r\n    let first_letter: string = gender_string.toUpperCase()[0];\r\n    if (first_letter === 'M') {\r\n        return 'M';\r\n    }\r\n    if (first_letter === 'F') {\r\n        return 'F';\r\n    }\r\n    alert('An answer in the \"Gender\" question was not \"Male\" or \"Female\". Please fix this.');\r\n    return '';\r\n}\r\n\r\nfunction splitListByGender(unsplit_list: Applicant[]): TwoArraysOfApplicants {\r\n    var mens_list: Applicant[] = [];\r\n    var womens_list: Applicant[] = [];\r\n\r\n    unsplit_list.forEach(applicant => {\r\n        let gender: string = parseGender(applicant.gender);\r\n\r\n        if (gender === 'M') {\r\n            mens_list.push(applicant);\r\n        } else if (gender === 'F') {\r\n            womens_list.push(applicant);\r\n        }\r\n    });\r\n    return {\r\n        mens_list: mens_list,\r\n        womens_list: womens_list\r\n    };\r\n}\r\n\r\nfunction randInt(min_inclusive: number, max_exclusive: number) {\r\n    return Math.floor(Math.random() * (max_exclusive - min_inclusive)) + min_inclusive;\r\n}\r\n\r\nfunction removeApplicantById(id: number, applicants: Applicant[]): Applicant[] {\r\n    var remaining_applicants: Applicant[] = [];\r\n\r\n    applicants.forEach(applicant => {\r\n        if (applicant.id !== id) {\r\n            remaining_applicants.push(applicant);\r\n        }\r\n    });\r\n\r\n    return remaining_applicants;\r\n}\r\n\r\nfunction createOrderedListOfApplicants(applicants: Applicant[], csv_data: string[][]): string[][] {\r\n    var ordered_applicants: string[][] = [];\r\n    \r\n    while (applicants.length > 0) {\r\n        // choose the next person to be added to the list\r\n        let index: number = randInt(0,applicants.length);\r\n        let selected_id: number = applicants[index].id;\r\n\r\n        // add their csv data to the ordered list\r\n        ordered_applicants.push(csv_data[selected_id]);\r\n\r\n        //remove them from the list\r\n        applicants = removeApplicantById(selected_id, applicants);\r\n    }\r\n\r\n    return ordered_applicants;\r\n} \r\n\r\nconst get_column_names = (csv_string: string): string[] => {\r\n    return CSVToArray(csv_string)[0];\r\n\r\n}\r\n\r\nconst process_list_from_array = (applicant_data: string[][], // should be the full text of the csv\r\n    first_name_index: number, \r\n    last_name_index: number, \r\n    gender_index: number, \r\n    times_applied_index: number, \r\n    graduating_index: number, \r\n    class_year_index: number): string[][][] => \r\n{\r\n\r\n// parse the csv array data into a list of Applicant objects\r\nvar applicants: Applicant[] = CSVDataToListOfApplicants(applicant_data,\r\n                                        first_name_index,\r\n                                        last_name_index,\r\n                                        gender_index,\r\n                                        times_applied_index,\r\n                                        graduating_index,\r\n                                        class_year_index);\r\n\r\n// split the applicant between men and women\r\nvar {mens_list, womens_list} = splitListByGender(applicants);\r\n\r\n// duplicate the applicants in the list based on the number of times applied\r\nvar men_with_duplicates: Applicant[] = duplicateApplicantsBasedOnTimesApplied(mens_list);\r\nvar women_with_duplicates: Applicant[] = duplicateApplicantsBasedOnTimesApplied(womens_list);\r\n\r\nvar final_mens_list: string[][] = createOrderedListOfApplicants(men_with_duplicates, applicant_data);\r\nvar final_womens_list: string[][] = createOrderedListOfApplicants(women_with_duplicates,applicant_data);\r\n\r\nreturn [final_mens_list, final_womens_list];\r\n}\r\n\r\nconst process_list_from_string = (applicant_data_csv: string, // should be the full text of the csv\r\n                        first_name_index: number, \r\n                        last_name_index: number, \r\n                        gender_index: number, \r\n                        times_applied_index: number, \r\n                        graduating_index: number, \r\n                        class_year_index: number): string[][][] => \r\n{\r\n    return process_list_from_array(CSVToArray(applicant_data_csv),\r\n                                    first_name_index,\r\n                                    last_name_index,\r\n                                    gender_index,\r\n                                    times_applied_index,\r\n                                    graduating_index,\r\n                                    class_year_index);\r\n    \r\n}\r\n\r\n\r\n\r\n// function print_selected(list: string[][]): void {\r\n//     const dividing_line: string = '=============================';\r\n\r\n//     console.log(dividing_line);\r\n//     list.forEach(item => {\r\n//         console.log(item[1] + ' ' + item[2]);\r\n//     });\r\n//     console.log('NUMBER: ' + list.length.toString());\r\n//     console.log(dividing_line);\r\n// }\r\n\r\n// function test_process_list(): void {\r\n//     var fs = require('fs');\r\n\r\n//     try {\r\n//         var data = fs.readFileSync('sample_applicants.csv', 'utf8');\r\n//         var [mens_list, womens_list] = process_list_from_string(data,1,2,3,14,13,12);\r\n//         print_selected(mens_list);\r\n//         print_selected(womens_list);\r\n//         console.log(mens_list);\r\n//     } catch(e) {\r\n//         console.log('Error:',e.stack);\r\n//     }\r\n// }\r\n\r\n// function test_get_column_names(): void {\r\n//     var fs = require('fs');\r\n\r\n//     try {\r\n//         var data = fs.readFileSync('sample_applicants.csv', 'utf8');\r\n//         var columns: string[] = get_column_names(data);\r\n//         console.log(columns);\r\n//     } catch(e) {\r\n//         console.log('Error:',e.stack);\r\n//     }\r\n// }\r\n\r\n//test_process_list(); // comment this when done testing\r\n//test_get_column_names(); // uncomment this to test\r\nexport {process_list_from_string, process_list_from_array, get_column_names}; // uncomment this when done testing","C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\InstructionStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\ProcessAndDownloadStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\IntroductionStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetLastNameStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetFirstNameStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVDownloadStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVUploadStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetGenderStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetTimesAppliedStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetGraduatingStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\CSVVerificationStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\GetClassYearStep.tsx",[],"C:\\Users\\Nick\\Desktop\\Holy of Holies\\AA116\\create-retreater-list-react\\src\\component-steps\\SelectionVerificationStep.tsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":46,"column":12,"nodeType":"90","messageId":"91","endLine":46,"endColumn":51},{"ruleId":"92","severity":1,"message":"93","line":57,"column":34,"nodeType":"94","messageId":"95","endLine":57,"endColumn":36},{"ruleId":"96","severity":1,"message":"97","line":82,"column":17,"nodeType":"98","messageId":"99","endLine":82,"endColumn":32},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-redeclare","'strMatchedValue' is already defined.","Identifier","redeclared","no-global-assign","no-unsafe-negation"]